#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Crypto Finance Bot
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
"""
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.data_collectors import DataCollector, test_data_collection
from src.ai_analyzer import AIAnalyzer, test_ai_analysis
from config import Config

def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("-" * 30)
    
    try:
        config = Config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print(f"AI Provider: {config.AI_PROVIDER}")
        print(f"AI Model: {config.AI_MODEL}")
        print(f"Cache Expire: {config.CACHE_EXPIRE_MINUTES} –º–∏–Ω")
        print(f"Data Update Interval: {config.DATA_UPDATE_INTERVAL} –º–∏–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã Yahoo Finance
        print(f"Yahoo Finance —Å–∏–º–≤–æ–ª–æ–≤: {len(config.YAHOO_SYMBOLS)}")
        for name, symbol in list(config.YAHOO_SYMBOLS.items())[:3]:
            print(f"  {name}: {symbol}")
        print("  ...")
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_data_sources():
    """–¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–ï–°–¢ –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–•")
    print("-" * 30)
    
    try:
        collector = DataCollector()
        
        # –¢–µ—Å—Ç Yahoo Finance
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é Yahoo Finance...")
        yahoo_data = collector.get_yahoo_finance_data()
        print(f"  –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(yahoo_data)}")
        
        # –¢–µ—Å—Ç –§–†–°
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –§–†–°...")
        fed_data = collector.get_fed_interest_rate()
        print(f"  –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {fed_data.get('current_rate', 'N/A')}%")
        
        # –¢–µ—Å—Ç Fear & Greed
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é Fear & Greed Index...")
        fear_greed = collector.get_fear_greed_index()
        print(f"  –ò–Ω–¥–µ–∫—Å: {fear_greed.get('value', 'N/A')} ({fear_greed.get('interpretation', 'N/A')})")
        
        # –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä
        print("üîç –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
        all_data = collector.collect_all_metrics()
        success_rate = all_data.get('data_quality', {}).get('sources_available', 0)
        print(f"  –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {success_rate}/3 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        if success_rate >= 2:
            print("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True, all_data
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False, all_data
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
        return False, None

def test_ai_integration():
    """–¢–µ—Å—Ç AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nü§ñ –¢–ï–°–¢ AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("-" * 30)
    
    try:
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_data = {
            'yahoo_finance': {
                'sp500': {'current_price': 4500, 'change_percent': 1.2},
                'bitcoin': {'current_price': 45000, 'change_percent': -2.1},
                'ethereum': {'current_price': 3200, 'change_percent': -1.8},
                'vix': {'current_price': 15.5},
                'dxy': {'current_price': 103.2, 'change_percent': 0.3}
            },
            'fed_rates': {
                'current_rate': 5.25,
                'ten_year_yield': 4.8,
                'yield_curve_spread': -0.45
            },
            'fear_greed_index': {
                'value': 35,
                'interpretation': '–°—Ç—Ä–∞—Ö'
            }
        }
        
        analyzer = AIAnalyzer()
        
        print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...")
        prompt = analyzer.create_analysis_prompt(test_data)
        print(f"  –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞...")
        short_analysis, full_analysis = analyzer.analyze_market_data(test_data)
        
        print(f"  –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑: {len(short_analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {len(full_analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True, short_analysis, full_analysis
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
        print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ")
        return False, None, None

def test_system_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢")
    print("-" * 30)
    
    try:
        print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        collector = DataCollector()
        market_data = collector.collect_all_metrics()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        analyzer = AIAnalyzer()
        short_analysis, full_analysis = analyzer.analyze_market_data(market_data)
        
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê:")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        print(f"üìà –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {market_data.get('data_quality', {}).get('sources_available', 0)}/3")
        print(f"üìù –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑: {len(short_analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìÑ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {len(full_analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\nüîç –ü–†–ò–ú–ï–† –ö–†–ê–¢–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print("-" * 30)
        print(short_analysis)
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRYPTO FINANCE BOT")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    tests_passed = 0
    total_tests = 4
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if test_configuration():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data_success, market_data = test_data_sources()
    if data_success:
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    ai_success, short, full = test_ai_integration()
    if ai_success:
        tests_passed += 1
    
    # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    if test_system_integration():
        tests_passed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\nüìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python main.py")
    elif tests_passed >= 2:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env")
        print("2. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ OPENAI_API_KEY")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == "__main__":
    main() 