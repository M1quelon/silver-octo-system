#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /crypto
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append('src')

from crypto_data_collector import CryptoDataCollector, test_crypto_data_collection
from cache_manager import CacheManager  
from ai_analyzer import AIAnalyzer

def test_crypto_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ö–û–ú–ê–ù–î–´ /crypto")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n1Ô∏è‚É£ –¢–ï–°–¢ –°–ë–û–†–©–ò–ö–ê –ö–†–ò–ü–¢–û–î–ê–ù–ù–´–•")
    print("-" * 40)
    
    try:
        collector = CryptoDataCollector()
        crypto_data = collector.collect_all_crypto_data()
        
        if crypto_data:
            print("‚úÖ CryptoDataCollector —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            top_coins = crypto_data.get('top_cryptocurrencies', [])
            derivatives = crypto_data.get('derivatives_data', {})
            fear_greed = crypto_data.get('fear_greed_index', {})
            
            print(f"   üìä –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(top_coins)}")
            print(f"   üìà –î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã: {len(derivatives)} –º–æ–Ω–µ—Ç")
            print(f"   üò± Fear & Greed: {'‚úÖ' if fear_greed else '‚ùå'}")
            
            if top_coins:
                print(f"   ü•á #1: {top_coins[0]['name']} (${top_coins[0]['price_usd']:,.2f})")
        
        else:
            print("‚ùå CryptoDataCollector –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CryptoDataCollector: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
    print("\n2Ô∏è‚É£ –¢–ï–°–¢ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –ö–†–ò–ü–¢–û–î–ê–ù–ù–´–•")
    print("-" * 40)
    
    try:
        cache_manager = CacheManager()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Å–æ–∑–¥–∞–µ–º –∫—ç—à)
        cached_crypto_data = cache_manager.get_crypto_data(force_update=True)
        
        if cached_crypto_data:
            print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
            cache_info = cache_manager.get_crypto_cache_info()
            print(f"   üì¶ –ö—ç—à —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cache_info.get('exists', False)}")
            print(f"   ‚úÖ –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω: {cache_info.get('is_valid', False)}")
            print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {cache_info.get('data_sources', 0)}/3")
        else:
            print("‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞
    print("\n3Ô∏è‚É£ –¢–ï–°–¢ AI –ê–ù–ê–õ–ò–ó–ê –ö–†–ò–ü–¢–û–î–ê–ù–ù–´–•")
    print("-" * 40)
    
    try:
        ai_analyzer = AIAnalyzer()
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑
        short_analysis, full_analysis = ai_analyzer.analyze_crypto_data(crypto_data)
        
        if short_analysis and full_analysis:
            print("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìù –ö–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑: {len(short_analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üìã –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {len(full_analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üß† –ú–æ–¥–µ–ª—å: {ai_analyzer.config.AI_MODEL}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            preview = short_analysis[:100] + "..." if len(short_analysis) > 100 else short_analysis
            print(f"   üîç –ü—Ä–µ–≤—å—é: {preview}")
            
        else:
            print("‚ùå AI –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            print("   (–í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∞–Ω–∞–ª–∏–∑)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False
    
    # 4. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n4Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê")
    print("-" * 40)
    
    components_working = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if crypto_data.get('top_cryptocurrencies'):
        components_working.append("‚úÖ –î–∞–Ω–Ω—ã–µ CoinGecko")
    else:
        components_working.append("‚ùå –î–∞–Ω–Ω—ã–µ CoinGecko")
    
    if crypto_data.get('derivatives_data'):
        components_working.append("‚úÖ –î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã Binance")
    else:
        components_working.append("‚ùå –î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã Binance") 
        
    if crypto_data.get('fear_greed_index'):
        components_working.append("‚úÖ Fear & Greed Index")
    else:
        components_working.append("‚ùå Fear & Greed Index")
    
    if cached_crypto_data:
        components_working.append("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        components_working.append("‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
    if short_analysis:
        components_working.append("‚úÖ AI –∞–Ω–∞–ª–∏–∑")
    else:
        components_working.append("‚ùå AI –∞–Ω–∞–ª–∏–∑")
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    for component in components_working:
        print(f"   {component}")
    
    working_count = sum(1 for c in components_working if c.startswith("‚úÖ"))
    total_count = len(components_working)
    
    print(f"\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨: {working_count}/{total_count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if working_count >= 3:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        print("üöÄ –ö–æ–º–∞–Ω–¥–∞ /crypto –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    else:
        print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /crypto —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False

def show_setup_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    
    print("\n" + "="*60)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ö–û–ú–ê–ù–î–´ /crypto")
    print("="*60)
    
    print("\n1Ô∏è‚É£ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
    print("   pip3 install pycoingecko python-binance ccxt")
    
    print("\n2Ô∏è‚É£ –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï API –ö–õ–Æ–ß–ò (–¥–æ–±–∞–≤–∏—Ç—å –≤ .env):")
    print("   # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Binance")
    print("   BINANCE_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("   BINANCE_SECRET_KEY=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á")
    
    print("\n3Ô∏è‚É£ –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê:")
    print("   /crypto - –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞")
    print("   - –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–±–µ–∑ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤)")
    print("   - –î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã –¥–ª—è —Ç–æ–ø-5 –º–æ–Ω–µ—Ç")
    print("   - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏")
    
    print("\n4Ô∏è‚É£ –ê–í–¢–û–ü–£–ë–õ–ò–ö–ê–¶–ò–Ø:")
    print("   - –£—Ç—Ä–æ–º –≤ 10:00 –ú–°–ö")
    print("   - –í–µ—á–µ—Ä–æ–º –≤ 22:00 –ú–°–ö")
    print("   - –ü—Ä–∏ ENABLE_AUTO_PUBLISH=true")
    
    print("\n5Ô∏è‚É£ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï:")
    print("   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 8:00 –∏ 20:00 –ú–°–ö")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    
    print("\nüöÄ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /crypto")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
    print()
    
    success = test_crypto_components()
    
    if success:
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ö–æ–º–∞–Ω–¥–∞ /crypto –≥–æ—Ç–æ–≤–∞!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    show_setup_instructions()
    print("\n" + "="*60) 