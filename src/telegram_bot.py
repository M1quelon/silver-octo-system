"""
Telegram –±–æ—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""
import logging
import json
import asyncio
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, MessageHandler, filters
)
from telegram.error import BadRequest, Forbidden
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from cache_manager import CacheManager
from ai_analyzer import AIAnalyzer
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Å–ø–∞–º HTTP –∑–∞–ø—Ä–æ—Å–æ–≤)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, Config.LOG_LEVEL)
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

class FinanceBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.config = Config()
        self.cache_manager = CacheManager()
        self.ai_analyzer = AIAnalyzer()
        
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.analysis_cache = {}
        self.last_analysis = None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.last_crypto_analysis = None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.scheduler = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            self.config.validate()
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        
        channel_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if self.config.TELEGRAM_CHANNEL_ID else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
        cache_info = self.cache_manager.get_cache_info()
        cache_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if cache_info['is_valid'] else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        
        welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Finance Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ —Å –ø–æ–º–æ—â—å—é AI.

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/metric - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞)
/crypto - –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ (—Ç–æ–ø-10 + –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã)  
/publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª
/channel - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º
/cache - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –¥–∞–Ω–Ω—ã—Ö
/help - –°–ø—Ä–∞–≤–∫–∞

üì∫ –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {channel_status}
üíæ –ö—ç—à –¥–∞–Ω–Ω—ã—Ö: {cache_status}

üîç –ß—Ç–æ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:
‚Ä¢ –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∏ (S&P 500, NASDAQ, VIX)
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –§–†–°
‚Ä¢ –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–∑–æ–ª–æ—Ç–æ, –Ω–µ—Ñ—Ç—å)

üí° –ù–∞–∂–º–∏—Ç–µ /metric –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ /publish –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª!
        """
        
        await update.message.reply_text(welcome_text)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id}")
    
    async def cache_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /cache - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ"""
        
        cache_info = self.cache_manager.get_cache_info()
        
        if not cache_info['exists']:
            status_text = """
üíæ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•

‚ùå –ö—ç—à –ø—É—Å—Ç
üîÑ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞—Å—Ç –∫—ç—à

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:
‚Ä¢ 09:00 –ú–°–ö (—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ)
‚Ä¢ 21:00 –ú–°–ö (–≤–µ—á–µ—Ä–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ)

üí° –≠—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç API –∑–∞–ø—Ä–æ—Å—ã –∏ —É—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.
            """
        else:
            last_update = cache_info['last_update']
            next_update = cache_info['next_update']
            
            status_icon = "‚úÖ" if cache_info['is_valid'] else "‚ö†Ô∏è"
            
            status_text = f"""
üíæ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•

{status_icon} –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç—É–∞–ª–µ–Ω' if cache_info['is_valid'] else '–¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'}
üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {cache_info.get('data_sources', 0)}/3

‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:
{last_update.strftime('%d.%m.%Y –≤ %H:%M') if last_update else '–ù–∏–∫–æ–≥–¥–∞'}

üîÑ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:
{next_update.strftime('%d.%m.%Y –≤ %H:%M')}

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 09:00 –∏ 21:00 –ú–°–ö
üí° –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
            """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="force_cache_update")],
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="get_metric_analysis")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(status_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        
        help_text = """
üìã –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú

üîç –ê–ù–ê–õ–ò–ó –†–´–ù–ö–û–í:
/metric - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞)
/crypto - –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ (—Ç–æ–ø-10 + –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã)
/publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª

üì∫ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–ú:
/channel - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
/cache - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö

‚ÑπÔ∏è –°–ü–†–ê–í–ö–ê:
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üéØ –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢:
1. /metric - –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–§–†–°, –∏–Ω–¥–µ–∫—Å—ã, –∑–æ–ª–æ—Ç–æ)
2. /crypto - –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ (—Ç–æ–ø-10 –º–æ–Ω–µ—Ç + –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã) 
3. /publish - –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª
4. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å

üìä –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
‚Ä¢ Yahoo Finance - –∞–∫—Ü–∏–∏, –∏–Ω–¥–µ–∫—Å—ã, —Å—ã—Ä—å—ë
‚Ä¢ –§–†–° - –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –°–®–ê
‚Ä¢ Fear & Greed Index - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞

‚ö° –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Ä–∞–±–æ—Ç—É

‚ùì –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        await update.message.reply_text(help_text)
    
    async def metric_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /metric - –∞–Ω–∞–ª–∏–∑ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ"""
        
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ /metric")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await update.message.reply_text(
            "üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–∫–∏...\n‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            market_data = self.cache_manager.get_market_data()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            data_quality = market_data.get('data_quality', {})
            success_rate = data_quality.get('sources_available', 0)
            
            if success_rate == 0:
                await loading_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
            short_analysis, full_analysis = self.ai_analyzer.analyze_market_data(market_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            self.last_analysis = {
                'short_analysis': short_analysis,
                'full_analysis': full_analysis,
                'market_data': market_data,
                'timestamp': datetime.now(),
                'success_rate': success_rate
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç"
            cache_key = f"{user_id}_{datetime.now().strftime('%Y%m%d_%H%M')}"
            self.analysis_cache[cache_key] = self.last_analysis
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data=f"full_report_{cache_key}")],
                [
                    InlineKeyboardButton("üì∫ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="publish_to_channel"),
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_metric")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
            cache_info = self.cache_manager.get_cache_info()
            cache_source = "üì¶ –ö—ç—à" if cache_info['is_valid'] else "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = f"""
üìä –ê–ù–ê–õ–ò–ó –†–´–ù–ö–û–í

{short_analysis}

üìà –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {success_rate}/3
{cache_source}
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}
            """
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await loading_message.delete()
            await update.message.reply_text(
                final_message, 
                reply_markup=reply_markup
            )
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /metric: {e}")
            await loading_message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def crypto_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /crypto - –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"""
        
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ /crypto")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await update.message.reply_text(
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫...\n"
            "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko –∏ Binance\n"
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ..."
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
            crypto_data = self.cache_manager.get_crypto_data()
            
            if not crypto_data:
                await loading_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç
            sources = crypto_data.get('data_sources', {})
            working_sources = sum(sources.values())
            
            if working_sources == 0:
                await loading_message.edit_text(
                    "‚ùå –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await loading_message.edit_text(
                "ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞...\n"
                f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {working_sources}/3\n"
                "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã—Ö
            short_analysis, full_analysis = self.ai_analyzer.analyze_crypto_data(crypto_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            self.last_crypto_analysis = {
                'short_analysis': short_analysis,
                'full_analysis': full_analysis,
                'crypto_data': crypto_data,
                'timestamp': datetime.now(),
                'working_sources': working_sources
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç"
            cache_key = f"crypto_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M')}"
            self.analysis_cache[cache_key] = self.last_crypto_analysis
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–æ—Ç—á—ë—Ç", callback_data=f"full_report_{cache_key}")],
                [
                    InlineKeyboardButton("üì∫ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="publish_crypto_to_channel"),
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ", callback_data="refresh_crypto")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–∫—ç—à–µ
            crypto_cache_info = self.cache_manager.get_crypto_cache_info()
            cache_source = "üì¶ –ö—ç—à" if crypto_cache_info.get('is_valid', False) else "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = f"""
ü™ô –ê–ù–ê–õ–ò–ó –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢

{short_analysis}

üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {working_sources}/3
{cache_source}
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}
            """
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await loading_message.delete()
            await update.message.reply_text(
                final_message, 
                reply_markup=reply_markup
            )
            
            logger.info(f"–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /crypto: {e}")
            await loading_message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–µ:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def publish_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /publish - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–∞–Ω–∞–ª"""
        
        if not self.config.TELEGRAM_CHANNEL_ID:
            await update.message.reply_text(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å TELEGRAM_CHANNEL_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
            )
            return
        
        if not self.last_analysis:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /metric –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return
        
        await self._publish_to_channel(update, context)
    
    async def _publish_to_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"""
        
        try:
            loading_msg = await update.effective_message.reply_text("üì∫ –ü—É–±–ª–∏–∫—É—é –∞–Ω–∞–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª...")
            
            analysis = self.last_analysis
            timestamp = analysis['timestamp']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–±–æ–ª–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ)
            channel_message = f"""
üìä –†–´–ù–û–ß–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê

{analysis['short_analysis']}

üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {analysis['success_rate']}/3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –ò–ò
‚è∞ {timestamp.strftime('%d.%m.%Y –≤ %H:%M')} –ú–°–ö

#–∞–Ω–∞–ª–∏–∑ #—Ä—ã–Ω–∫–∏ #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #–ò–ò
            """
            
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            channel_cache_key = f"channel_{datetime.now().strftime('%Y%m%d_%H%M')}"
            self.analysis_cache[channel_cache_key] = analysis
            
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data=f"full_report_{channel_cache_key}")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", url=f"https://t.me/{context.bot.username}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            await context.bot.send_message(
                chat_id=self.config.TELEGRAM_CHANNEL_ID,
                text=channel_message,
                reply_markup=reply_markup
            )
            
            await loading_msg.edit_text(
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!\n"
                f"üïí {timestamp.strftime('%H:%M')}"
            )
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {self.config.TELEGRAM_CHANNEL_ID}")
            
        except Forbidden:
            await loading_msg.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É!\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
                "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "‚Ä¢ ID –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            )
        except BadRequest as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:\n{str(e)}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await loading_msg.edit_text(
                f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}"
            )
    
    async def _publish_crypto_to_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–∞–Ω–∞–ª"""
        
        if not self.config.TELEGRAM_CHANNEL_ID:
            await update.effective_message.reply_text(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å TELEGRAM_CHANNEL_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
            )
            return
        
        if not self.last_crypto_analysis:
            await update.effective_message.reply_text(
                "‚ùå –ù–µ—Ç –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /crypto"
            )
            return
        
        try:
            loading_msg = await update.effective_message.reply_text("üì∫ –ü—É–±–ª–∏–∫—É—é –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª...")
            
            analysis = self.last_crypto_analysis
            timestamp = analysis['timestamp']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
            channel_message = f"""
ü™ô –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–´–ô –ê–ù–ê–õ–ò–ó

{analysis['short_analysis']}

üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {analysis['working_sources']}/3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –ò–ò GPT-4 Turbo
‚è∞ {timestamp.strftime('%d.%m.%Y –≤ %H:%M')} –ú–°–ö

#–∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ #bitcoin #ethereum #–∞–ª—å—Ç–∫–æ–∏–Ω—ã #–ò–ò #–¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã
            """
            
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            channel_cache_key = f"crypto_channel_{datetime.now().strftime('%Y%m%d_%H%M')}"
            self.analysis_cache[channel_cache_key] = analysis
            
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–æ—Ç—á—ë—Ç", callback_data=f"full_report_{channel_cache_key}")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ", url=f"https://t.me/{context.bot.username}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            await context.bot.send_message(
                chat_id=self.config.TELEGRAM_CHANNEL_ID,
                text=channel_message,
                reply_markup=reply_markup
            )
            
            await loading_msg.edit_text(
                f"‚úÖ –ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!\n"
                f"üïí {timestamp.strftime('%H:%M')}"
            )
            
            logger.info(f"–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {self.config.TELEGRAM_CHANNEL_ID}")
            
        except Forbidden:
            await loading_msg.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É!\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
                "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "‚Ä¢ ID –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            )
        except BadRequest as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:\n{str(e)}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
            await loading_msg.edit_text(
                f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}"
            )
    
    async def channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /channel - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ"""
        
        channel_id = self.config.TELEGRAM_CHANNEL_ID
        
        if not channel_id:
            await update.message.reply_text(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                "üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "2. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_CHANNEL_ID –≤ .env —Ñ–∞–π–ª\n"
                "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        try:
            chat = await context.bot.get_chat(channel_id)
            
            keyboard = [
                [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞", callback_data="test_channel")],
                [InlineKeyboardButton("üìä –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="publish_to_channel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            info_text = f"""
üì∫ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–ù–ê–õ–ï

üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}
üÜî ID: {channel_id}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.member_count if hasattr(chat, 'member_count') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

‚úÖ –°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω
ü§ñ –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if self.config.ENABLE_AUTO_PUBLISH else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {'–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 18:00 –ú–°–ö' if self.config.ENABLE_AUTO_PUBLISH else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ: –í–∫–ª—é—á–µ–Ω—ã (–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç)
            """
            
            await update.message.reply_text(info_text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É!\n\n"
                f"ID –∫–∞–Ω–∞–ª–∞: {channel_id}\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞\n"
                "‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ—Ç–∞"
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("full_report_"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
            cache_key = query.data.replace("full_report_", "")
            
            if cache_key in self.analysis_cache:
                cached_data = self.analysis_cache[cache_key]
                full_analysis = cached_data['full_analysis']
                
                # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                navigation_keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                    [
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="refresh_metric"),
                        InlineKeyboardButton("üì∫ –í –∫–∞–Ω–∞–ª", callback_data="publish_to_channel")
                    ]
                ]
                navigation_markup = InlineKeyboardMarkup(navigation_keyboard)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if len(full_analysis) > 4000:
                    parts = [full_analysis[i:i+4000] for i in range(0, len(full_analysis), 4000)]
                    
                    for i, part in enumerate(parts):
                        if i == 0:
                            await query.edit_message_text(
                                f"üìã –ü–û–õ–ù–´–ô –û–¢–ß–Å–¢ (—á–∞—Å—Ç—å {i+1}/{len(parts)})\n\n{part}",
                                reply_markup=navigation_markup if i == len(parts) - 1 else None
                            )
                        else:
                            message_text = f"üìã –ü–û–õ–ù–´–ô –û–¢–ß–Å–¢ (—á–∞—Å—Ç—å {i+1}/{len(parts)})\n\n{part}"
                            
                            if i == len(parts) - 1:
                                # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                                await query.message.reply_text(message_text, reply_markup=navigation_markup)
                            else:
                                await query.message.reply_text(message_text)
                else:
                    await query.edit_message_text(
                        f"üìã –ü–û–õ–ù–´–ô –û–¢–ß–Å–¢\n\n{full_analysis}",
                        reply_markup=navigation_markup
                    )
                
                logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id}")
            else:
                await query.edit_message_text(
                    "‚ùå –û—Ç—á—ë—Ç —É—Å—Ç–∞—Ä–µ–ª. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /metric –∑–∞–Ω–æ–≤–æ."
                )
        
        elif query.data == "main_menu":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self._show_main_menu(query)
        
        elif query.data == "show_cache_info":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ (–∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /cache)
            await self._show_cache_info_inline(query)
        
        elif query.data == "show_channel_info":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ (–∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /channel)
            await self._show_channel_info_inline(query)
        
        elif query.data == "show_help":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É (–∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /help)
            await self._show_help_inline(query)
        
        elif query.data == "refresh_metric":
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞
            await query.edit_message_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            market_data = self.cache_manager.get_market_data(force_update=True)
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /metric
            await self.metric_command(update, context)
        
        elif query.data == "refresh_crypto":
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞
            await query.edit_message_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã–µ...")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–∫—ç—à
            crypto_data = self.cache_manager.get_crypto_data(force_update=True)
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /crypto
            await self.crypto_command(update, context)
        
        elif query.data == "publish_crypto_to_channel":
            # –ü—É–±–ª–∏–∫—É–µ–º –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª
            await self._publish_crypto_to_channel(update, context)
        
        elif query.data == "publish_to_channel":
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            await self._publish_to_channel(update, context)
        
        elif query.data == "test_channel":
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
            try:
                test_message = f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
                await context.bot.send_message(
                    chat_id=self.config.TELEGRAM_CHANNEL_ID,
                    text=test_message
                )
                await query.edit_message_text("‚úÖ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!")
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞:\n{str(e)}")
        
        elif query.data == "force_cache_update":
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
            await query.edit_message_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é –∫—ç—à...")
            
            try:
                self.cache_manager.get_market_data(force_update=True)
                cache_info = self.cache_manager.get_cache_info()
                
                await query.edit_message_text(
                    f"‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n"
                    f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {cache_info.get('data_sources', 0)}/3\n"
                    f"‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%H:%M')}"
                )
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:\n{str(e)}")
        
        elif query.data == "get_metric_analysis":
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∫—ç—à–∞
            await self.metric_command(update, context)
    
    async def _show_main_menu(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        channel_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if self.config.TELEGRAM_CHANNEL_ID else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        cache_info = self.cache_manager.get_cache_info()
        cache_status = "‚úÖ –ê–∫—Ç—É–∞–ª–µ–Ω" if cache_info.get('is_valid', False) else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        
        main_menu_text = f"""
ü§ñ **Crypto Finance Bot** - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ —Å –ò–ò
üì∫ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
üíæ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º

üìå **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**
üì∫ –ö–∞–Ω–∞–ª: {channel_status}
üíæ –ö—ç—à: {cache_status}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤", callback_data="get_metric_analysis"),
                InlineKeyboardButton("üì∫ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_to_channel")
            ],
            [
                InlineKeyboardButton("üíæ –ö—ç—à", callback_data="show_cache_info"),
                InlineKeyboardButton("üîß –ö–∞–Ω–∞–ª", callback_data="show_channel_info")
            ],
            [
                InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="show_help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(main_menu_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(main_menu_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _show_cache_info_inline(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
        
        cache_info = self.cache_manager.get_cache_info()
        
        if not cache_info.get('exists', False):
            status_text = """
üíæ **–ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•**

‚ùå –ö—ç—à –ø—É—Å—Ç
üîÑ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞—Å—Ç –∫—ç—à

üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:**
‚Ä¢ 09:00 –ú–°–ö (—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ)
‚Ä¢ 21:00 –ú–°–ö (–≤–µ—á–µ—Ä–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ)

üí° –≠—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç API –∑–∞–ø—Ä–æ—Å—ã –∏ —É—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.
            """
        else:
            last_update = cache_info.get('last_update')
            next_update = cache_info.get('next_update')
            
            status_icon = "‚úÖ" if cache_info.get('is_valid', False) else "‚ö†Ô∏è"
            
            status_text = f"""
üíæ **–ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•**

{status_icon} –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç—É–∞–ª–µ–Ω' if cache_info.get('is_valid', False) else '–¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'}
üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {cache_info.get('data_sources', 0)}/3

‚è∞ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:**
{last_update.strftime('%d.%m.%Y –≤ %H:%M') if last_update else '–ù–∏–∫–æ–≥–¥–∞'}

üîÑ **–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:**
{next_update.strftime('%d.%m.%Y –≤ %H:%M') if next_update else 'N/A'}

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 09:00 –∏ 21:00 –ú–°–ö
üí° –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
            """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="force_cache_update")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _show_channel_info_inline(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
        
        channel_id = self.config.TELEGRAM_CHANNEL_ID
        
        if not channel_id:
            info_text = """
üì∫ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–ú**

‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!

üí° **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_CHANNEL_ID –≤ .env —Ñ–∞–π–ª
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞
            """
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            try:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞, –Ω–æ —É–ø—Ä–æ—Å—Ç–∏–º –¥–ª—è inline
                info_text = f"""
üì∫ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–ù–ê–õ–ï**

üÜî ID: {channel_id}
‚úÖ –°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω
ü§ñ –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if self.config.ENABLE_AUTO_PUBLISH else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {'–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 18:00 –ú–°–ö' if self.config.ENABLE_AUTO_PUBLISH else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ: –í–∫–ª—é—á–µ–Ω—ã
                """
                
                keyboard = [
                    [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞", callback_data="test_channel")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            except:
                info_text = f"""
üì∫ **–û–®–ò–ë–ö–ê –ö–ê–ù–ê–õ–ê**

üÜî ID: {channel_id}
‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É

üí° **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ—Ç–∞
                """
                
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(info_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _show_help_inline(self, query) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
        
        help_text = """
üìã **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

üîç **–ê–ù–ê–õ–ò–ó –†–´–ù–ö–û–í:**
/metric - –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
/publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª

üì∫ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–ú:**
/channel - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
/cache - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö

‚ÑπÔ∏è **–°–ü–†–ê–í–ö–ê:**
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üéØ **–ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢:**
1. /metric - –∞–Ω–∞–ª–∏–∑ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
2. /publish - –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª
3. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å

üìä **–ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:**
‚Ä¢ Yahoo Finance - –∞–∫—Ü–∏–∏, –∏–Ω–¥–µ–∫—Å—ã, —Å—ã—Ä—å—ë
‚Ä¢ –§–†–° - –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –°–®–ê
‚Ä¢ Fear & Greed Index - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞

‚ö° –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Ä–∞–±–æ—Ç—É

‚ùì –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/metric - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤\n"
            "/crypto - –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            "/publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª\n"
            "/channel - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º\n"
            "/cache - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞"
        )
    
    def _setup_auto_publish_scheduler(self, application: Application) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        
        if not self.config.ENABLE_AUTO_PUBLISH or not self.config.TELEGRAM_CHANNEL_ID:
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
        
        self.scheduler = BackgroundScheduler()
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 18:00 –ú–°–ö
        self.scheduler.add_job(
            func=self._auto_publish_analysis,
            trigger=CronTrigger(hour=18, minute=0, timezone="Europe/Moscow"),
            args=[application],
            id="daily_market_publish",
            replace_existing=True
        )
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –≤ 10:00 –∏ 22:00 –ú–°–ö  
        self.scheduler.add_job(
            func=self._auto_publish_crypto_analysis,
            trigger=CronTrigger(hour=10, minute=0, timezone="Europe/Moscow"),
            args=[application],
            id="morning_crypto_publish",
            replace_existing=True
        )
        
        self.scheduler.add_job(
            func=self._auto_publish_crypto_analysis,
            trigger=CronTrigger(hour=22, minute=0, timezone="Europe/Moscow"),
            args=[application],
            id="evening_crypto_publish",
            replace_existing=True
        )
        
        self.scheduler.start()
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞:")
        logger.info("‚Ä¢ –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 18:00 –ú–°–ö") 
        logger.info("‚Ä¢ –ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑: –≤ 10:00 –∏ 22:00 –ú–°–ö")
    
    async def _auto_publish_analysis(self, application: Application) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–∞–Ω–∞–ª"""
        
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self.cache_manager.get_market_data(force_update=True)
            
            if not market_data:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑
            short_analysis, full_analysis = self.ai_analyzer.analyze_market_data(market_data)
            
            if not short_analysis:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            analysis_key = f"auto_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            self.analysis_cache[analysis_key] = {
                'short_analysis': short_analysis,
                'full_analysis': full_analysis,
                'timestamp': datetime.now()
            }
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data=f"full_report_{analysis_key}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            await application.bot.send_message(
                chat_id=self.config.TELEGRAM_CHANNEL_ID,
                text=f"ü§ñ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –†–´–ù–ö–û–í**\n\n{short_analysis}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    async def _auto_publish_crypto_analysis(self, application: Application) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–∞–Ω–∞–ª"""
        
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã–µ
            crypto_data = self.cache_manager.get_crypto_data(force_update=True)
            
            if not crypto_data:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑
            short_analysis, full_analysis = self.ai_analyzer.analyze_crypto_data(crypto_data)
            
            if not short_analysis:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            analysis_key = f"auto_crypto_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            working_sources = sum(crypto_data.get('data_sources', {}).values())
            
            self.analysis_cache[analysis_key] = {
                'short_analysis': short_analysis,
                'full_analysis': full_analysis,
                'crypto_data': crypto_data,
                'timestamp': datetime.now(),
                'working_sources': working_sources
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            current_hour = datetime.now().hour
            time_period = "üåÖ –£–¢–†–ï–ù–ù–ò–ô" if current_hour < 16 else "üåô –í–ï–ß–ï–†–ù–ò–ô"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞  
            channel_message = f"""
ü™ô {time_period} –ö–†–ò–ü–¢–û–ê–ù–ê–õ–ò–ó

{short_analysis}

üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {working_sources}/3 –∞–∫—Ç–∏–≤–Ω—ã
ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: GPT-4 Turbo
‚è∞ {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')} –ú–°–ö

#–∞–≤—Ç–æ–∫—Ä–∏–ø—Ç–æ #bitcoin #ethereum #–∞–ª—å—Ç–∫–æ–∏–Ω—ã #–¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã #–ò–ò
            """
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–æ—Ç—á—ë—Ç", callback_data=f"full_report_{analysis_key}")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ", url=f"https://t.me/{application.bot.username}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            await application.bot.send_message(
                chat_id=self.config.TELEGRAM_CHANNEL_ID,
                text=channel_message,
                reply_markup=reply_markup
            )
            
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def stop_scheduler(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler and self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config.TELEGRAM_BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("metric", self.metric_command))
        application.add_handler(CommandHandler("crypto", self.crypto_command))
        application.add_handler(CommandHandler("publish", self.publish_command))
        application.add_handler(CommandHandler("channel", self.channel_command))
        application.add_handler(CommandHandler("cache", self.cache_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        application.add_handler(MessageHandler(filters.COMMAND, self.unknown_command))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self._setup_auto_publish_scheduler(application)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        try:
            application.run_polling()
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self.stop_scheduler()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = None
    try:
        bot = FinanceBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if bot:
            bot.stop_scheduler()

if __name__ == "__main__":
    main() 